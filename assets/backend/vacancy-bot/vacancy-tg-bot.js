import { Telegraf, Markup } from 'telegraf';

const BOT_TOKEN = '8170264095:AAEHA7xJki-OQeByHxD5Q13mBfVDgvIvMc0';
const MOD_CHAT = '@moa_request_moderation';
const ADMIN_ID = 4855572343; // —Ç–≤–æ–π ID –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
const bot = new Telegraf(BOT_TOKEN);

const pendingVacancies = new Map();
const waitingForReason = new Map();
const userCooldowns = new Map(); // userId -> timestamp

const COOLDOWN_MS = 60 * 60 * 1000; // 1 —á–∞—Å

bot.on('message', async (ctx) => {
    const text = ctx.message?.text?.trim();
    if (!text) return;

    const fromId = ctx.from.id;
    const chatId = ctx.chat.id;
    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–¥–∞—É–Ω–∞
    if (ctx.chat.type === 'private') {
        const lastTime = userCooldowns.get(fromId) || 0;
        if (now - lastTime < COOLDOWN_MS) {
            const remaining = Math.ceil((COOLDOWN_MS - (now - lastTime)) / 60000);
            await ctx.reply(`‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ ${remaining} –º–∏–Ω.`);
            return;
        }
    }

    // 1) –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
    if (waitingForReason.has(fromId)) {
        const wait = waitingForReason.get(fromId);
        if (ctx.chat.id === wait.modChatId || ctx.chat.type === 'private') {
            const vacancy = pendingVacancies.get(wait.vacancyId);
            if (vacancy && vacancy.status === 'awaiting_reason') {
                const reason = text;
                try {
                    await bot.telegram.sendMessage(vacancy.userId, `üö´ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
                } catch { }
                try {
                    const newText = `${vacancy.text}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
                    await bot.telegram.editMessageText(wait.modChatId, wait.modMessageId, undefined, newText);
                } catch { }
                pendingVacancies.delete(wait.vacancyId);
                waitingForReason.delete(fromId);
                await ctx.reply('‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–∏.');
            } else {
                waitingForReason.delete(fromId);
                await ctx.reply('‚ùó –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            }
            return;
        }
    }

    // 2) –ü—Ä–∏—ë–º –≤–∞–∫–∞–Ω—Å–∏–π –≤ –õ–°
    if (ctx.chat.type === 'private') {
        const vacancyText = text;
        const vacancyId = Date.now().toString();

        try {
            const sent = await ctx.telegram.sendMessage(
                MOD_CHAT,
                `üìÑ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è (ID: ${vacancyId}):\n\n${vacancyText}`,
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${vacancyId}`),
                        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${vacancyId}`)
                    ]
                ])
            );

            pendingVacancies.set(vacancyId, {
                userId: fromId,
                text: vacancyText,
                modChatId: sent.chat.id,
                modMessageId: sent.message_id,
                status: 'pending'
            });

            userCooldowns.set(fromId, now); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏

            await ctx.reply('‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.');
        } catch (err) {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.');
        }
        return;
    }
});

bot.action(/approve_(.+)/, async (ctx) => {
    const vacancyId = ctx.match[1];
    const vacancy = pendingVacancies.get(vacancyId);
    if (!vacancy) return ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');

    try {
        await bot.telegram.sendMessage(vacancy.userId, 'üéâ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
        const newText = `${vacancy.text}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @${ctx.from.username || ctx.from.first_name}`;
        await bot.telegram.editMessageText(vacancy.modChatId, vacancy.modMessageId, undefined, newText);
        pendingVacancies.delete(vacancyId);
        await ctx.answerCbQuery('–í–∞–∫–∞–Ω—Å–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞');
    } catch {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.');
    }
});

bot.action(/reject_(.+)/, async (ctx) => {
    const vacancyId = ctx.match[1];
    const vacancy = pendingVacancies.get(vacancyId);
    if (!vacancy) return ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');

    vacancy.status = 'awaiting_reason';
    pendingVacancies.set(vacancyId, vacancy);

    const moderatorId = ctx.from.id;
    waitingForReason.set(moderatorId, {
        vacancyId,
        modChatId: ctx.chat.id,
        modMessageId: ctx.update.callback_query.message.message_id
    });

    await ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ (–∏–ª–∏ –≤ –ª–∏—á–∫—É –±–æ—Ç—É).');
    await ctx.answerCbQuery('–û–∂–∏–¥–∞—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞');
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫–æ–ª–¥–∞—É–Ω–æ–º 1 —á–∞—Å.');
